算法
1、	用哪种结构表示和存储
2、	如何实现（算法 实现的过程）
3、	编码（各种语言）
算法定义：解决问题的步骤---->一连串有序的指令完成某个功能
算法的五个特征：
1、输入：有0个或者多个输入
2、输出：算法中一定会有功能的代码
3、确定性：
4、可行性：
5、有穷性：能正常结束的

程序：使用不同的语言把算法实现出来

评判算法好坏的依据：
	空间复杂度：占用的空间位置
	时间复杂度：占用的时间长短
-----------------------------------------------
大o阶推导法：
	通过推导加计算来评估一个算法执行的次数  从而评判算法的优劣
	忽略一些不太主要的次数项目
		常数项不考虑
		更关心一个算法 最高此项是多少 忽略系数
		在一个算法中 只关心 最高次项的 项数是多少 忽略其他次项
	几种常见大o阶
		常数阶  o（1）
		线性阶  o（n）
		平方阶  o（n2）  最多嵌套2个
		对数阶  o（log2N）
常用的时间复杂度所耗费的时间从小到大依次是：
0(1) < 0(logn) < (n) < 0(nlogn) < 0(n^2)
三大逻辑结构:
	线性结构
	树状结构
	网状结构
1.线性结构:
	特征: 元素个数>=0 (空表)
每个元素 最大只有一个前驱一个后继 头部元素没有前驱 尾部元素没有后继
		  总个数还是有一定限制
	实现方式：
		顺序存储(逻辑结构相邻 物理结构也相邻)  数组类型做容器
				随机访问: int numArray[]={1,2,3,4,45,5,6};
						  numArray[3]=4;
				loc(ai)=a1+size*(i-1);
				删除和移动比较麻烦:
		定义顺序表结构:
			结构体：
				数组做容器 变量声明长度
			取值操作:
				算法效率特别高O1
				
			插入和删除算法:
				时间复杂度是On 
		特点:
			随机访问特别快  插入删除比较慢  
		链式存储
----------------------------------------	
栈：
	本质是线性表 栈只允许一端操作
		先进后出   后进先出
表达式：前缀、中缀、后缀
中转后：符号优先级比栈里的低	弹低栈
后缀：遇数字入栈  遇符号出两个数
队列：
	本质还是线性表,操作可以在两端操作，一端弹出数据对头，另外一端可以插入数据收尾，
	
	特征：先进先出 后进后出 特点
	
线性表：
	普通线性表(随意位置 随意位置和插入 链式结构和顺序结构)
	
	栈结构(在一端位置操作 先进后出 后进先出 顺序栈实现)
	
	列队结构(在两端位置操作 一端进一端出 先进先出 后进后出 链式队列实现)
----------------------------------------------
树：
	元素就是结点
	结点有几个儿子就有几个"度"
	中间有子结点的叫"中间结点"
	最后一排为叶子结点

二叉树：分左右结点
	只有左边
	只有右边
	左右都有

满二叉树每层结点都是最大结点数
满二叉树一定是完全二叉树
完全二叉树不一定是满二叉树

前序：根-->左-->右	（最快遍历，层次感）
中序：左-->根-->右	（快查，知道一定的条件下）（把符号放在根上边，元素放在叶子上）
后序：左-->右-->根	（反查，繁琐度高）
--------------------------------
深度优先：
	按照一种走法  一条路走到黑  然后回退  发现有没有走过的   继续走
广度优先：
	
最小生成树：
	prim(普里姆)算法：每次找最短的(边多)
	Kruskal(卡鲁斯卡尔)算法：每次找到最短的，然后直接连起来(边少点多)
	最短路径：
	
	
	
	
	
	
	
	

